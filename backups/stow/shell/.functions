function uba() {
	echo "Openning uba folder with vscode..."
	# open vscode 
	code ~/Desktop/uba
	
	# wait for vscode to open
	sleep 2 
	
	echo "Openning UBA firefox profile..."
	# open UBA profile
	nohup firefox -P UBA &
}

function remitz_github_login() {
	echo "Logging into gitub, enter password..."
	# Log into github with ssh keys for remitz
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_remitz
	ssh -T git@github.com
}

function remitz_firefox () {
	# Extract URLs from the "work" bookmark folder
	sqlite3 ~/places.sqlite.backup "
    	SELECT moz_places.url FROM moz_places
	    JOIN moz_bookmarks ON moz_places.id = moz_bookmarks.fk
   		WHERE moz_bookmarks.parent IN (
	    SELECT id FROM moz_bookmarks WHERE title='work'
	);" > ~/work_links.txt 
	
	nohup firefox -P Remitz $(cat ~/work_links.txt) &

	sleep 2
}

# remitz master function
function remitz() {
	remitz_github_login	

	echo "Opening remitz folder with vscode..."
	# Open repository with vscode
	code ~/Desktop/remitz/scrapers

	# wait for vscode to load
	sleep 2
	
	echo "Opening slack..."
	# open slack
	slack
	
	# wait for slack to load
	sleep 2 
	
	echo "Opening firefox Remitz profile"
	remitz_firefox
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# make pdf from latex and open it
function latex() {
    local objname="${1%.*}"
    local srcname="$objname.pdf"
    pdflatex "${1}"
    pdflatex "${1}"
    open "$srcname"
}

# add a file and commit with a message
function gacm(){
    git add "$1"
    git commit -m "$2"
}

# add a file, commit with a message, and push
function gacmp(){
	gacm "$1" "$2"
    git push
}

# add a file, commit with a message, and push
function gcmp(){
	gcm "$1" 
    git push
}

# clone a repository and save the location to a file
function gcl(){
   git clone "$1"
}

# initialize an empty repository and save the location to a file
function gi(){
   git init
   current_dir=$(pwd)
   echo $current_dir
   grep $current_dir ~/.git-repos-globally.txt &>/dev/null || echo $current_dir >> ~/.git-repos-globally.txt
}

# find all repositories in this system
function find-git(){
    repos=~/.git-repos-globally.txt
    if [ -f "$repos" ] && [ -s $repos ] && [ "$1" != '-f' ]; then
        # repos file exists, is not empty, and the -f flag isn't being used
        cat $repos
        return 0
    else
       find ~ -name ".git" > ~/.git-repos-globally.txt
       cat $repos
        return 127
    fi
}

# get all status from git repos in some folder
function find-git-status(){
	current_dir=$(pwd)
    no_repos_changed=true
	if [ "$1" = "-f" ]; then
		echo "Creating a repositories index from scratch"
		find ~ -name ".git" > ~/.git-repos-globally.txt
	elif find-git &>/dev/null; then
		echo "A repositories index has been found..."
	else
		echo "No repositores index found, creating one from scratch..."
		find ~ -name ".git" > ~/.git-repos-globally.txt
	fi
		repos=( $(cat ~/.git-repos-globally.txt) )
	for d in $repos; do
		cd $d/..;
		if ! git diff-index --quiet HEAD --; then
			echo `pwd`:;
			gss
			echo;
			no_repos_changed=false
		fi
	done
	if $no_repos_changed ; then
		echo "No repos have been found with untracked files"
	fi
	cd $current_dir
}

# find names that contain string in name in current directory
function findlike(){
    find . -name "*$1*"
}


# change desktop background image
function set-background-desktop(){
    # to use add an image to below path and call
    # set-background-desktop [name-of-image]
    var="file:///home/matheth/Pictures/desktop-wallpapers/$1"
    echo $var
    gsettings set org.gnome.desktop.background picture-uri "$var"
}

# change lockscreen background image
function set-background-lockscreen(){
    # to use add an image to below path and call
    # set-background-lockscreen [name-of-image]
    var="file:///home/matheth/Pictures/desktop-wallpapers/$1"
    echo $var
    gsettings set org.gnome.desktop.screensaver picture-uri "$var"
}

# backup keybindings
function backup-keybindings(){
    dconf dump '/org/gnome/desktop/wm/keybindings/' > ~/.dotfiles/backups/stow/backups/.backups/keybindings.dconf
    dconf dump '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/' > ~/.dotfiles/backups/stow/backups/.backups/custom-keybindings.dconf
}

# backup installed software
function backup-installed-software(){
	dpkg --get-selections  | awk '{ print $1 }' > ~/.dotfiles/backups/stow/backups/.backups/installed-software.log
}

# backup entire settings
function backup-system(){
	dconf dump / > ~/.dotfiles/backups/stow/backups/.backups/full-backup
}

# backup crontabs
function backup-crontab(){
	crontab -l > ~/.dotfiles/backups/periodic-backup/crontabs/crontab.save.dinh
}

# create a backup of codium keybindings and settings
function backup-codium(){
    codium --list-extensions > ~/.dotfiles/backups/periodic-backup/codium/extensions_list.txt
	cp ~/.config/VSCodium/User/{keybindings,settings}.json ~/.dotfiles/backups/periodic-backup/codium
}

# do a full backup
function backup-full(){
	backup-keybindings
	backup-installed-software
	backup-system
	backup-crontab
    backup-codium
}

# sound alarm
function alarm-on(){
	amixer sset 'Master' 100%
	mplayer -loop 0 /home/matheth/Desktop/ALARM-CLOCK-DONT-DELETE/Alarm-ringtone.mp3
}

# cat and less function
function cless(){
	cat "$1" | less
}

